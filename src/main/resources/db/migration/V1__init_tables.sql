CREATE TABLE User_ (
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role     VARCHAR(255) NOT NULL
);

CREATE TABLE Category (
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE Event (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       VARCHAR(255) NOT NULL UNIQUE,
    started_at TIMESTAMPTZ  NOT NULL,
    ended_at   TIMESTAMPTZ  NOT NULL,

    CONSTRAINT check_event_dates CHECK (
        started_at < ended_at AND
        started_at >= NOW() AND
        ended_at > NOW()
    )
);

CREATE TABLE Team (
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE TeamRegistration (
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_id  BIGINT NOT NULL,
    event_id BIGINT NOT NULL,

    FOREIGN KEY (team_id)
        REFERENCES Team (id)
        ON DELETE CASCADE,

    FOREIGN KEY (event_id)
        REFERENCES Event (id)
        ON DELETE CASCADE
);

CREATE TABLE Task (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question         TEXT         NOT NULL,
    description      TEXT         NOT NULL,
    number_of_points INT          NOT NULL CHECK (number_of_points > 0),
    file_path        VARCHAR(255) NOT NULL,
    event_id         BIGINT       NOT NULL,
    category_id      BIGINT       NOT NULL,

    FOREIGN KEY (event_id)
        REFERENCES Event (id)
        ON DELETE CASCADE,

    FOREIGN KEY (category_id)
        REFERENCES Category (id)
        ON DELETE SET NULL
);

CREATE TABLE TaskDependence (
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dependent_task_id BIGINT NOT NULL,
    parent_task_id    BIGINT NOT NULL,

    FOREIGN KEY (dependent_task_id)
        REFERENCES Task (id)
        ON DELETE CASCADE,

    FOREIGN KEY (parent_task_id)
        REFERENCES Task (id)
        ON DELETE CASCADE
);

CREATE TABLE Student (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name  VARCHAR(255) NOT NULL,
    user_id    BIGINT       NOT NULL UNIQUE,

    FOREIGN KEY (user_id)
        REFERENCES User_ (id)
        ON DELETE CASCADE
);

CREATE TABLE TeamMember (
    id                   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_registration_id BIGINT NOT NULL,
    student_id           BIGINT NOT NULL,

    FOREIGN KEY (team_registration_id)
        REFERENCES TeamRegistration (id)
        ON DELETE CASCADE,

    FOREIGN KEY (student_id)
        REFERENCES Student (id)
        ON DELETE CASCADE
);

CREATE TABLE TeamTaskAssignment (
    id                   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_registration_id BIGINT,
    task_id              BIGINT,

    FOREIGN KEY (team_registration_id)
        REFERENCES TeamRegistration (id)
        ON DELETE CASCADE,

    FOREIGN KEY (task_id)
        REFERENCES Task (id)
        ON DELETE CASCADE
);


CREATE TABLE TeamCorrectAnswer (
    id                      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    correct_answer          VARCHAR(255) NOT NULL,
    team_task_assignment_id BIGINT       NOT NULL UNIQUE,

    FOREIGN KEY (team_task_assignment_id)
        REFERENCES TeamTaskAssignment (id)
        ON DELETE CASCADE
);

CREATE TABLE Point (
    id                      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quantity                INT         NOT NULL CHECK (quantity > 0),
    team_task_assignment_id BIGINT      NOT NULL UNIQUE,
    issued_at               TIMESTAMPTZ NOT NULL,

    FOREIGN KEY (team_task_assignment_id)
        REFERENCES TeamTaskAssignment (id)
        ON DELETE CASCADE
);

CREATE TABLE WinningTeam (
    id                   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_registration_id BIGINT NOT NULL UNIQUE,

    FOREIGN KEY (team_registration_id)
        REFERENCES TeamRegistration (id)
        ON DELETE CASCADE
);
